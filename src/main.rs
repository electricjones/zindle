use configuration::collection::Property;
use runtime::Runtime;

pub mod configuration;
pub mod runtime;

// #[derive(Configuration)]
pub struct MyConfig {
    // #[configurable]
    // a: i32,
    a: Property,

    // #[configurable]
    // b: bool,
    b: Property,

    // #[configurable]
    // c: String,
    c: Property,
}

// Generated by derive OR implement default
impl Default for MyConfig {
    fn default() -> Self {
        Self {
            a: Self::default_a(),
            b: Self::default_b(),
            c: Self::default_c(),
        }
    }
}

// Generated
impl MyConfig {
    pub fn new() -> Self {
        Self {}
    }

    pub fn default_a() -> i32 {
        28
    }
    pub fn a(&self) -> i32 {
        self.a
    }

    pub fn default_b() -> bool {
        false
    }

    pub fn b(&self) -> bool {
        self.b
    }

    pub fn default_c() -> String {
        String::from("michael")
    }

    pub fn c(&self) -> String {
        self.c
    }
}

fn main() {
    // @todo: Runtime Builder Pattern
    // let mut runtime = Runtime::new();

    let config = MyConfig::new();

    let a = config.a();
}
