use configuration::collection::Property;
use values::{Value, ValueError};

pub mod configuration;
pub mod runtime;
pub mod values;

// #[derive(Configuration)]
pub struct MyConfig {
    // #[configurable]
    // #[default(28)]
    // a: i32,
    an_i32: Property,

    // #[configurable]
    // #[default(false)]
    // b: bool,
    a_bool: Property,

    // #[configurable]
    // c: String,
    // with no default_c() you must implement it
    // todo: Allow them to simply implement Default and use those values in building this
    a_string: Property,
}

// Generated by derive
impl Default for MyConfig {
    fn default() -> Self {
        Self {
            an_i32: Property::new(
                "an_i32",
                ":an_i32",
                Value::try_from(Self::default_an_i32()).unwrap(),
            ),
            a_bool: Property::new(
                "a_bool",
                ":a_bool",
                Value::try_from(Self::default_a_bool()).unwrap(),
            ),
            a_string: Property::new(
                "a_string",
                ":a_string",
                Value::try_from(Self::default_a_string()).unwrap(),
            ),
        }
    }
}

// Generated
impl MyConfig {
    pub fn default_an_i32() -> i32 {
        28
    }

    pub fn an_i32(&self) -> i32 {
        self.an_i32.value().try_into().unwrap()
    }

    pub fn default_a_bool() -> bool {
        false
    }

    pub fn a_bool(&self) -> bool {
        self.a_bool.value().try_into().unwrap()
    }

    pub fn default_a_string() -> String {
        String::from("michael")
    }

    pub fn a_string(&self) -> String {
        self.a_string.value().try_into().unwrap()
    }
}

fn main() {
    // @todo: Runtime Builder Pattern
    // let mut runtime = Runtime::new();

    let config = MyConfig::default();

    // let a = config.a();
}

#[cfg(test)]
mod tests {
    use crate::MyConfig;

    #[test]
    fn it_uses_the_default_values() {
        let config = MyConfig::default();

        // Use the default value
        assert_eq!(28, config.an_i32());
        assert_eq!(false, config.a_bool());
        assert_eq!("michael".to_string(), config.a_string());
    }

    #[test]
    fn it_uses_statically_set_values() {
        let config = MyConfig::default();

        // Use the default value
        assert_eq!(28, config.an_i32());
        assert_eq!(false, config.a_bool());
        assert_eq!("michael".to_string(), config.a_string());
    }
}
